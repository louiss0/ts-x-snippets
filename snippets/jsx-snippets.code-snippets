{
    "Constant Variable": {
        "prefix": "ts?x:cstst",
        "body": "const ${1:name} = ${2:}",
        "description": "This is just a const snippet"
    },
    "Let Variable": {
        "prefix": "ts?x:let",
        "body": "let ${1:name} = ${2:}",
        "description": "THis is just a let snippet"
    },
    "Awaited Variable": {
        "prefix": "ts?x:await-con",
        "body": "const ${1:name} = await ${2:}",
        "description": "This is an await snippet that stores the res in a const"
    },
    "import": {
        "prefix": "ts?x:imp",
        "body": "import ${2:moduleName} from '${1:module}';$0",
        "description": "Imports entire module statement in ES6 syntax"
    },
    "importNoModuleName": {
        "prefix": "ts?x:imn",
        "body": "import '${1:module}';$0",
        "description": "Imports entire module in ES6 syntax without module name"
    },
    "importDestructing": {
        "prefix": "ts?x:imd",
        "body": "import { $2 } from '${1:module}';$0",
        "description": "Imports only a portion of the module in ES6 syntax"
    },
    "importEverything": {
        "prefix": "ts?x:ime",
        "body": "import * as ${2:alias} from '${1:module}';$0",
        "description": "Imports everything as alias from the module in ES6 syntax"
    },
    "importAs": {
        "prefix": "ts?x:ima",
        "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
        "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
    },
    "require": {
        "prefix": "ts?x:rqr",
        "body": "require('${1:package}');",
        "description": "Require a package"
    },
    "requireToConst": {
        "prefix": "ts?x:req",
        "body": "const ${1:packageName} = require('${1:package}');$0",
        "description": "Require a package to const"
    },
    "moduleExports": {
        "prefix": "ts?x:mde",
        "body": "module.exports = {\n\t$0\n};\n",
        "description": "Module exports from Common JS, node syntax at ES6"
    },
    "exportNamedVariable": {
        "prefix": "ts?x:exnv",
        "body": "export const ${1:exportVariable} = ${2:localVariable};\n",
        "description": "Export named variable in ES6 syntax"
    },
    "exportNamedFunction": {
        "prefix": "ts?x:exnf",
        "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
        "description": "Export named function in ES6 syntax"
    },
    "exportDefaultFunction": {
        "prefix": "ts?x:exdf",
        "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
        "description": "Export default function in ES6 syntax"
    },
    "exportClass": {
        "prefix": "ts?x:excl",
        "body": "export default class ${1:className} {\n\t$0\n};\n",
        "description": "Export default class in ES6 syntax"
    },
    "exportClassExtends": {
        "prefix": "ts?x:exce",
        "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
        "description": "Export default class which extends a base one in ES6 syntax"
    },
    "constructor": {
        "prefix": "ts?x:cst",
        "body": "constructor(${1:params}) {\n\t${0}\n}",
        "description": "Add default constructor in a class in ES6 syntax"
    },
    "method": {
        "prefix": "ts?x:met",
        "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
        "description": "Creates a method inside a class in ES6 syntax"
    },
    "async method": {
        "prefix": "ts?x:a-met",
        "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
        "description": "Creates a method inside a class in ES6 syntax"
    },
    "propertyGet": {
        "prefix": "ts?x:pge",
        "body": "get ${1:propertyName}() {\n\treturn this.${0};\n}",
        "description": "Creates a getter property inside a class in ES6 syntax"
    },
    "propertySet": {
        "prefix": "ts?x:pse",
        "body": "set ${1:propertyName}(${2:value}) {\n\t${0};\n}",
        "description": "Creates a setter property inside a class in ES6 syntax"
    },
    "forEach": {
        "prefix": "ts?x:fre",
        "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n});",
        "description": "Creates a forEach statement in ES6 syntax"
    },
    "forOf": {
        "prefix": "ts?x:fof",
        "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
        "description": "Iterating over property names of iterable objects"
    },
    "anonymousFunction": {
        "prefix": "ts?x:anfn",
        "body": "(${1:params}) => {\n\t${2}\n}",
        "description": "Creates an anonymous function in ES6 syntax"
    },
    "Async anonymousFunction": {
        "prefix": "ts?x:as-anfn",
        "body": "(${1:params}) => {\n\t${2}\n}",
        "description": "Creates an anonymous function in ES6 syntax"
    },
    "Async namedFunction": {
        "prefix": "ts?x:as-nfn",
        "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
        "description": "Creates a named function in ES6 syntax"
    },
    "destructingObject": {
        "prefix": "ts?x:dob",
        "body": "const {${2:propertyName}} = ${1:objectToDestruct};",
        "description": "Creates and assigns a local variable using object destructing"
    },
    "destructingArray": {
        "prefix": "ts?x:dar",
        "body": "const [${2:propertyName}] = ${1:arrayToDestruct};",
        "description": "Creates and assigns a local variable using array destructing"
    },
    "setInterval": {
        "prefix": "ts?x:sti",
        "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
        "description": "Executes the given function at specified intervals in ES6 syntax"
    },
    "setTimeOut": {
        "prefix": "ts?x:sto",
        "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
        "description": "Executes the given function after the specified delay in ES6 syntax"
    },
    "promise": {
        "prefix": "ts?x:prom",
        "body": "return new Promise((resolve, reject) => {\n\t${1}\n});",
        "description": "Creates and returns a new Promise in the standard ES6 syntax"
    },
    "thenCatch": {
        "prefix": "ts?x:thenc",
        "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n});",
        "description": "Add the .then and .catch methods to handle promises"
    },
    "consoleAssert": {
        "prefix": "ts?x:cas",
        "body": "console.assert(${1:expression}, ${2:object});",
        "description": "If the specified expression is false, the message is written to the console along with a stack trace"
    },
    "consoleClear": {
        "prefix": "ts?x:ccl",
        "body": "console.clear();",
        "description": "Clears the console"
    },
    "consoleCount": {
        "prefix": "ts?x:cco",
        "body": "console.count(${1:label});",
        "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
    },
    "consoleDebug": {
        "prefix": "ts?x:cdb",
        "body": "console.debug(${1:object});",
        "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari"
    },
    "consoleDir": {
        "prefix": "ts?x:cdi",
        "body": "console.dir(${1:object});",
        "description": "Prints a JavaScript representation of the specified object"
    },
    "consoleError": {
        "prefix": "ts?x:cer",
        "body": "console.error(${1:object});",
        "description": "Displays a message in the console and also includes a stack trace from where the method was called"
    },
    "consoleGroup": {
        "prefix": "ts?x:cgr",
        "body": "console.group('${1:label}');",
        "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
    },
    "consoleGroupEnd": {
        "prefix": "ts?x:cge",
        "body": "console.groupEnd();",
        "description": "Closes out the corresponding console.group()."
    },
    "consoleLog": {
        "prefix": "ts?x:clg",
        "body": "console.log(${1:object});",
        "description": "Displays a message in the console"
    },
    "consoleLogObject": {
        "prefix": "ts?x:clo",
        "body": "console.log('${1:object} :>> ', ${1:object});",
        "description": "Displays an object in the console with its name"
    },
    "consoleTrace": {
        "prefix": "ts?x:ctr",
        "body": "console.trace(${1:object});",
        "description": "Prints a stack trace from the point where the method was called"
    },
    "consoleWarn": {
        "prefix": "ts?x:cwa",
        "body": "console.warn(${1:object});",
        "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
    },
    "consoleInfo": {
        "prefix": "ts?x:cin",
        "body": "console.info(${1:object});",
        "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
    },
    "consoleTable": {
        "prefix": "ts?x:clt",
        "body": "console.table(${1:object});",
        "description": "Displays tabular data as a table."
    },
    "consoleTime": {
        "prefix": "ts?x:cti",
        "body": "console.time(${1:object});",
        "description": "Sets starting point for execution time measurement"
    },
    "consoleTimeEnd": {
        "prefix": "ts?x:cte",
        "body": "console.timeEnd(${1:object});",
        "description": "Sets end point for execution time measurement"
    },
    "Functional Component": {
        "prefix": "ts?x:fcmp",
        "body": "function ${1:name}() {\n\n\nreturn <${2:tag}>${3:expr}</div>\n\n}",
        "description": "Creates a functional component",
    },
    "Export Default Function Component": {
        "prefix": "ts?x:exfcmp",
        "body": "export default function ${3:${TM_FILENAME_BASE}}(${4:params}) {\n\n\n\t<${2:tag}>${1}</div>\n\n}",
        "description": "Export default functional component ",
        "isFileTemplate": true,
    },
    "Class Component": {
        "prefix": "ts?x:ccmp",
        "body": "class ${0:name}{\n\n\n\nrender(){\n\n\n\t<${2:tag}>${3:expr}</div>\n\n}\n\n\n}",
        "description": "Creates a class component",
    },
    "Export Default Class Component": {
        "prefix": "ts?x:exccmp",
        "body": "export default class ${0:${TM_FILENAME_BASE}} {\n\n\n\nrender(){\n\n\n\t<${2:tag}>\n${3:expr}\n</div>\n\n}\n\n\n}",
        "description": "Creates an export default class component",
        "isFileTemplate": true,
    },
}